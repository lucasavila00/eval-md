{{##0##}}

type FileResult = {
    content: any;
    blockIndex: number;
}[];
type GenDef = {
    generator: () => Promise<FileResult>;
    source: string;
};

const main = async () => {
    const response: Record<string, FileResult> = {};
    const results = await Promise.all(generators.map(it => it.generator()))
    generators.forEach((it, idx) => {
        response[it.source] = results[idx]
    })
    process.stdout.write("\n##eval-md-start##\n");
    process.stdout.write(JSON.stringify(response));
    process.stdout.write("\n##eval-md-end##\n");
};
main().catch((e) => {
    // eslint-disable-next-line no-console
    console.error(e);
    process.exit(1);
});
