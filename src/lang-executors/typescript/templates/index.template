{{##0##}}

type GenDef = {
    generator: () => Promise<
        {
            content: any;
            blockIndex: number;
        }[]
    >;
    source: string;
};

const stringifyFileResponse = (
    response: {
        content: any;
        blockIndex: number;
    }[]
): {
    content: any;
    blockIndex: number;
}[] => {
    return response.map((it) => {
        if (it.content instanceof Error) {
            return {
                blockIndex: it.blockIndex,
                content: String(it.content),
            };
        }
        return {
            blockIndex: it.blockIndex,
            content: JSON.stringify(it.content),
        };
    });
};

const main = async () => {
    const response: Record<
        string,
        {
            content: any;
            blockIndex: number;
        }[]
    > = {};
    for (const def of generators) {
        response[def.source] = await def
            .generator()
            .then(stringifyFileResponse);
    }
    process.stdout.write("\n##eval-md-start##\n");
    process.stdout.write(JSON.stringify(response));
    process.stdout.write("\n##eval-md-end##\n");
};
main().catch((e) => {
    // eslint-disable-next-line no-console
    console.error(e);
    process.exit(1);
});
